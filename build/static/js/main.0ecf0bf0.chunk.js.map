{"version":3,"sources":["utils/API.js","components/Cards/Cards.js","components/Button/Button.js","components/Content/Content.js","components/Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["API","content","axios","get","concat","Cards","props","react_default","a","createElement","className","onClick","clickCard","title","url","lang","dangerouslySetInnerHTML","__html","Button","this","toggleClassName","children","Component","Content","Menu","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","condition","handleMenu","bind","assertThisInitialized","window","onpopstate","handlePopState","onload","location","pathname","split","setState","getData","_this2","then","res","handleData","catch","err","console","log","articles","blog","glossary","states","topics","swal","href","_this3","reactstrap_es","BrowserRouter","components_Menu_Menu","components_Button_Button","Link","handleHomePage","to","Route","path","components_Content_Content","toUpperCase","map","index","components_Cards_Cards","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ecf0bf0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n//AXIOS GET \r\nexport default {\r\n  getContent (content) {\r\n    return axios.get(`https://www.healthcare.gov/api/${content}.json`);\r\n  }\r\n}","import React from 'react';\r\nimport './Cards.css';\r\n\r\nconst Cards = props => (\r\n  <div className=\"card\" onClick={() => props.clickCard(props.title, props.content, props.url)}>\r\n  <div className=\"lang\">{props.lang}</div>\r\n    <h4 className=\"card-head\">{props.title}</h4>\r\n        <div dangerouslySetInnerHTML={{__html: props.content}}></div>\r\n    </div>\r\n)\r\n\r\nexport default Cards;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={ this.props.className }\r\n        onClick={ this.props.toggleClassName }\r\n      >\r\n        { this.props.children }\r\n      </div>\r\n    )    \r\n  }\r\n}\r\n\r\nexport default Button","import React, { Component } from 'react';\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <div className={ this.props.className }>\r\n        { this.props.children }\r\n      </div>\r\n    )    \r\n  }\r\n}\r\n\r\nexport default Content","import React, { Component } from 'react';\r\n\r\nclass Menu extends Component {\r\n  render() {\r\n    return (\r\n      <div className={ this.props.className}>\r\n        { this.props.children }\r\n      </div>\r\n    )    \r\n  }\r\n}\r\n\r\nexport default Menu","import React, { Component } from 'react';\r\nimport {Container} from 'reactstrap';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport API from \"./utils/API\";\r\nimport Cards from './components/Cards';\r\nimport Button from './components/Button';\r\nimport Content from './components/Content';\r\nimport Menu from './components/Menu';\r\nimport swal from '@sweetalert/with-react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor (props) {\r\n\r\n    super(props);\r\n//States\r\n      this.state = {\r\n      data:[],                                                    //data from https://www.healthcare.gov/api\r\n      url: \"\",                                                    // current page URL\r\n      condition: false,                                           // style menu, content, menu-btn\r\n    };\r\n\r\n    this.handleMenu = this.handleMenu.bind(this);                 \r\n  }\r\n\r\n  // Load page when user click back and forward browser button\r\ncomponentDidMount(){\r\n  window.onpopstate = this.handlePopState.bind(this);\r\n  window.onload = this.handlePopState.bind(this);\r\n}\r\n\r\n//Get variable from current URL to run API function\r\nhandlePopState () {\r\n  let url1 = window.location.pathname.split(\"/\"); \r\n  let url = url1[1];                                               //current type of content (articles, blog ...)\r\n  this.setState({url: url});\r\n  if(url) {\r\n    this.getData(url)\r\n  } else {\r\n    this.setState({data: []})\r\n  };\r\n}\r\n\r\n//API GET https://www.healthcare.gov/api/${content}.json\r\n  getData (url) {\r\n    API.getContent(url)\r\n   .then(res => this.handleData(res.data))\r\n   .catch(err => console.log(err))\r\n   console.log(url)\r\n  }\r\n\r\n//Handle recieved data from https://www.healthcare.gov/api and store in this.state.data\r\n  handleData  (data)  {\r\n    this.setState({data: []});\r\n    \r\n    if (data.articles) this.setState({data: data.articles});\r\n    if (data.blog) {this.setState({data: data.blog})};\r\n    if (data.glossary) this.setState({data: data.glossary});\r\n    if (data.states) this.setState({data: data.states});\r\n    if (data.topics) this.setState({data: data.topics});\r\n     console.log(this.state.data);\r\n    }\r\n \r\n// Handle Home Page. Display no data\r\n  handleHomePage(){\r\n    this.setState({data: []})\r\n    this.setState({url: \"\"});\r\n  }\r\n\r\n// Menu pops up\r\n  handleMenu(){\r\n    this.setState({\r\n      condition: !this.state.condition\r\n    })\r\n  }\r\n\r\n//Display Title, Content and URL when user clicks the card\r\nclickCard (title, content, url){\r\n    swal(<div>\r\n   <h1 className=\"text-center\"><a href={'https://www.healthcare.gov' + url}>{title}</a></h1>\r\n   <div dangerouslySetInnerHTML={{__html: content}}></div>\r\n   </div>\r\n    )\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Container>\r\n       <div className=\"wrapper\">\r\n      <Router>\r\n     <div>\r\n        <Menu className={ this.state.condition ? \"menu menu_active\" : \"menu\" }> {/*change Menu className*/}\r\n          <div className=\"btn-wrapper\">\r\n            <Button  className={ this.state.condition ? \"menu-btn menu-btn_active\" : \"menu-btn\" } \r\n        toggleClassName={ this.handleMenu }>                                    {/*change Button className*/}\r\n              <span></span>\r\n            </Button>\r\n          </div>\r\n          {/*List of App's pages*/}\r\n          <nav className=\"menu-list\">\r\n          <div className=\"main-button\"><Link onClick={() => this.handleHomePage()} to=\"/\">Home</Link></div>\r\n          <div className=\"main-button\" onClick={() => this.handlePopState()}><Link to=\"/articles\">Articles</Link></div>\r\n          <div className=\"main-button\" onClick={() => this.handlePopState()}><Link to=\"/blog\">Blog</Link></div>\r\n          <div className=\"main-button\" onClick={() => this.handlePopState()}><Link to=\"/glossary\">Glossary</Link></div>\r\n          <div className=\"main-button\" onClick={() => this.handlePopState()}><Link to=\"/states\">States</Link></div>\r\n          <div className=\"main-button\" onClick={() => this.handlePopState()}><Link to=\"/topics\">Topics</Link></div>\r\n          </nav>\r\n        </Menu>\r\n        <Route path=\"/:id\"/>\r\n        </div>\r\n    </Router>\r\n    <Content className={ this.state.condition ? \"content content_active\" : \"content\" }> {/*change Content className*/}\r\n    <div className=\"header text-center\">{this.state.url.toUpperCase()}</div>\r\n   {/*Display data on cards*/}\r\n    {this.state.data\r\n      .map(index =>(\r\n        <Cards\r\n        title = {index.title}\r\n        content={index.content}\r\n        lang={index.lang}\r\n        url = {index.url}\r\n        clickCard = {this.clickCard}\r\n        />\r\n      ))} \r\n      </Content>\r\n      </div>\r\n      </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}